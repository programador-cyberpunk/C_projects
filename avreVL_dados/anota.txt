
// Rotação Simples à Esquerda (LL)
void rotacaoLL(arvAVL *A) {
    struct NO *B;
    B = (*A)->esq;
    (*A)->esq = B->dir; // Atualiza o filho esquerdo de A
    B->dir = (*A);      // B se torna pai de A

    // Atualiza alturas
    (*A)->alt = maior(alt_no((*A)->esq), alt_no((*A)->dir)) + 1;
    B->alt = maior(alt_no(B->esq), (*A)->alt) + 1;
    *A = B; // A nova raiz da subárvore é B
}

// Rotação Dupla Direita-Esquerda (RL)
void rotacaoRL(arvAVL *A) {
    rotacaoLL(&(*A)->dir); // Rotação LL no filho direito
    rotacaoRR(A);          // Rotação RR na raiz
}

// Rotação Dupla Esquerda-Direita (LR)
void rotacaoLR(arvAVL *A) {
    rotacaoRR(&(*A)->esq); // Rotação RR no filho esquerdo
    rotacaoLL(A);          // Rotação LL na raiz
}

// --- Funções Principais da AVL ---

// Cria e inicializa uma árvore AVL
arvAVL* cria_arvAVL() {
    arvAVL *raiz = (arvAVL*) malloc(sizeof(arvAVL));
    if (raiz != NULL) {
        *raiz = NULL;
    }
    return raiz;
}

// Função para liberar a memória da árvore (recursivo)
void libera_NO(struct NO *no) {
    if (no == NULL) return;
    libera_NO(no->esq);
    libera_NO(no->dir);
    free(no);
}

void libera_arvAVL(arvAVL *raiz) {
    if (raiz == NULL) return;
    libera_NO(*raiz); // Libera cada nó
    free(raiz);       // Libera o ponteiro para a raiz
}

// Insere um funcionário na AVL
int insere_arvAVL(arvAVL *raiz, Funcionario f) {
    int res;
    if (*raiz == NULL) { // Árvore vazia ou encontrou o ponto de inserção
        struct NO *novo = (struct NO*) malloc(sizeof(struct NO));
        if (novo == NULL) {
            return 0; // Falha na alocação
        }
        memcpy(&(novo->info), &f, sizeof(Funcionario)); // Copia a struct
        novo->alt = 0;
        novo->esq = NULL;
        novo->dir = NULL;
        *raiz = novo;
        return 1; // Inserção bem-sucedida
    }

    struct NO *atual = *raiz;
    if (f.id < atual->info.id) {
        if ((res = insere_arvAVL(&(atual->esq), f)) == 1) {
            if (fator_balanceamento(atual) >= 2) {
                if (f.id < (*raiz)->esq->info.id) { // Inserção na subárvore esquerda do filho esquerdo (LL)
                    rotacaoLL(raiz);
                } else { // Inserção na subárvore direita do filho esquerdo (LR)
                    rotacaoLR(raiz);
                }
            }
        }
    } else if (f.id > atual->info.id) {
        if ((res = insere_arvAVL(&(atual->dir), f)) == 1) {
            if (fator_balanceamento(atual) <= -2) { // Note o <= -2 para o lado direito
                if (f.id > (*raiz)->dir->info.id) { // Inserção na subárvore direita do filho direito (RR)
                    rotacaoRR(raiz);
                } else { // Inserção na subárvore esquerda do filho direito (RL)
                    rotacaoRL(raiz);
                }
            }
        }
    } else { // Valor duplicado
        printf("Elemento %d ja existente, insercao duplicada...\n\n", f.id);
        return 0;
    }

    // Atualiza a altura do nó atual após a inserção e possíveis rotações
    atual->alt = maior(alt_no(atual->esq), alt_no(atual->dir)) + 1;
    return res; // Retorna o resultado da inserção recursiva
}

// Função auxiliar para encontrar o menor nó em uma subárvore
struct NO* procuraMenor(struct NO* atual) {
    struct NO *no1 = atual;
    struct NO *no2 = atual->esq;
    while (no2 != NULL) {
        no1 = no2;
        no2 = no2->esq;
    }
    return no1;
}

// Remove um funcionário da AVL por ID
int remove_arvAVL(arvAVL *raiz, int id_a_remover) {
    if (*raiz == NULL) { // Elemento não encontrado
        return 0;
    }

    int res;
    if (id_a_remover < (*raiz)->info.id) {
        if ((res = remove_arvAVL(&(*raiz)->esq, id_a_remover)) == 1) {
            if (fator_balanceamento(*raiz) >= 2) { // Subárvore esquerda está desbalanceada
                if (alt_no((*raiz)->dir->esq) <= alt_no((*raiz)->dir->dir)) {
                    rotacaoRR(raiz);
                } else {
                    rotacaoRL(raiz);
                }
            }
        }
    } else if (id_a_remover > (*raiz)->info.id) {
        if ((res = remove_arvAVL(&(*raiz)->dir, id_a_remover)) == 1) {
            if (fator_balanceamento(*raiz) <= -2) { // Subárvore direita está desbalanceada
                if (alt_no((*raiz)->esq->dir) <= alt_no((*raiz)->esq->esq)) {
                    rotacaoLL(raiz);
                } else {
                    rotacaoLR(raiz);
                }
            }
        }
    } else { // Encontrou o nó a ser removido
        if ((*raiz)->esq == NULL || (*raiz)->dir == NULL) { // Nó tem 0 ou 1 filho
            struct NO *oldNode = *raiz;
            if ((*raiz)->esq != NULL) {
                *raiz = (*raiz)->esq;
            } else {
                *raiz = (*raiz)->dir;
            }
            free(oldNode);
        } else { // Nó tem 2 filhos
            struct NO *temp = procuraMenor((*raiz)->dir);
            memcpy(&((*raiz)->info), &(temp->info), sizeof(Funcionario)); // Copia o conteúdo
            remove_arvAVL(&(*raiz)->dir, temp->info.id); // Remove o nó que foi copiado
            if (fator_balanceamento(*raiz) >= 2) {
                if (alt_no((*raiz)->dir->esq) <= alt_no((*raiz)->dir->dir)) {
                    rotacaoRR(raiz);
                } else {
                    rotacaoRL(raiz);
                }
            }
        }
        return 1; // Remoção bem-sucedida
    }

    // Atualiza altura do nó atual após remoção e possível rebalanceamento
    if (*raiz != NULL) {
        (*raiz)->alt = maior(alt_no((*raiz)->esq), alt_no((*raiz)->dir)) + 1;
    }
    return res; // Retorna o resultado da remoção recursiva
}

// Função para consultar um nó (retorna 1 se encontrado, 0 se não)
int consulta_arvAVL(arvAVL *raiz, int id_a_buscar) {
    if (*raiz == NULL) {
        return 0; // Árvore vazia ou ID não encontrado
    }

    if ((*raiz)->info.id == id_a_buscar) {
        imprimeFuncionario(&(*raiz)->info); // Imprime os dados do funcionário encontrado
        return 1;
    } else if (id_a_buscar < (*raiz)->info.id) {
        return consulta_arvAVL(&(*raiz)->esq, id_a_buscar);
    } else {
        return consulta_arvAVL(&(*raiz)->dir, id_a_buscar);
    }
}

// Percorre a árvore em ordem (para depuração)
void emOrdem_arvAVL(arvAVL *raiz) {
    if (*raiz != NULL) {
        emOrdem_arvAVL(&(*raiz)->esq);
        imprimeFuncionario(&(*raiz)->info);
        emOrdem_arvAVL(&(*raiz)->dir);
    }
}